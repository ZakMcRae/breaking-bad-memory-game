{"version":3,"sources":["components/CharacterCard.js","components/CharacterGrid.js","static/images/breaking-bad.png","components/InfoBlock.js","App.js","index.js"],"names":["CharacterCard","props","className","id","characterData","char_id","onClick","clickCharacterCard","src","img","alt","name","CharacterGrid","shuffledChars","array","randomIndex","currentIndex","length","Math","floor","random","shuffle","characters","slice","limit","map","char","InfoBlock","title","body","App","useState","gameState","setGameState","allCharacters","setAllCharacters","currentScore","setCurrentScore","bestScore","setBestScore","round","setRound","clickedCards","setClickedCards","useEffect","console","log","fetch","then","req","json","data","catch","alert","startNewRound","startNewGame","prevRound","e","target","includes","prevClickedCards","prevCurrentScore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cfde79e.chunk.js","sourcesContent":["import \"./CharacterCard.css\";\n\nfunction CharacterCard(props) {\n  return (\n    <div\n      className=\"character-card\"\n      id={props.characterData.char_id}\n      onClick={props.clickCharacterCard}\n    >\n      <img\n        src={props.characterData.img}\n        alt={props.characterData.name}\n        id={props.characterData.char_id}\n      ></img>\n      <p id={props.characterData.char_id}>{props.characterData.name}</p>\n    </div>\n  );\n}\n\nexport default CharacterCard;\n","import CharacterCard from \"../components/CharacterCard\";\nimport \"./CharacterGrid.css\";\n\nfunction CharacterGrid(props) {\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  function shuffle(array) {\n    var currentIndex = array.length,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n\n  const shuffledChars = shuffle(props.characters.slice(0, props.limit));\n  return (\n    <div className=\"character-grid\">\n      {shuffledChars.map((char) => {\n        return (\n          <CharacterCard\n            key={char.char_id}\n            characterData={char}\n            clickCharacterCard={props.clickCharacterCard}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default CharacterGrid;\n","export default __webpack_public_path__ + \"static/media/breaking-bad.20e7dd9a.png\";","import img from \"../static/images/breaking-bad.png\";\nimport \"./InfoBlock.css\";\n\nfunction InfoBlock(props) {\n  return (\n    <div className=\"info-block\">\n      <img className=\"title-card\" src={img} alt=\"Breaking Bad title card\"></img>\n      <h1>{props.title}</h1>\n      <p>{props.body}</p>\n    </div>\n  );\n}\n\nexport default InfoBlock;\n","import { useState, useEffect } from \"react\";\n\nimport \"./App.css\";\nimport CharacterGrid from \"./components/CharacterGrid\";\nimport InfoBlock from \"./components/InfoBlock\";\n\nfunction App() {\n  const [gameState, setGameState] = useState(\"welcome\");\n  const [allCharacters, setAllCharacters] = useState([]);\n  const [currentScore, setCurrentScore] = useState(0);\n  const [bestScore, setBestScore] = useState(0);\n  const [round, setRound] = useState(1);\n  const [clickedCards, setClickedCards] = useState([]);\n\n  const cardsToShow = 6;\n  const highestScore = 60;\n\n  // fetch api data on page load - first time only\n  useEffect(() => {\n    console.log(\"Fetching API Data\");\n    fetch(\"https://breakingbadapi.com/api/characters\")\n      .then((req) => req.json())\n      .then((data) => setAllCharacters(data))\n      .catch(() =>\n        alert(\n          \"breakingbadapi.com is down\\n\\nThis app depends on it to function\\n\\nPlease try again later\"\n        )\n      );\n  }, []);\n\n  // update scoreboard and handle new round\n  useEffect(() => {\n    if (currentScore === highestScore) {\n      setGameState(\"highest score\");\n    }\n\n    if (bestScore < currentScore) {\n      setBestScore(currentScore);\n    }\n\n    if (clickedCards.length === round * cardsToShow) {\n      startNewRound();\n    }\n  }, [clickedCards, bestScore, currentScore, round]);\n\n  const startNewGame = () => {\n    setGameState(\"game\");\n    setCurrentScore(0);\n    setRound(1);\n    setClickedCards([]);\n  };\n\n  const startNewRound = () => {\n    setClickedCards([]);\n    setRound((prevRound) => prevRound + 1);\n  };\n\n  const clickCharacterCard = (e) => {\n    const id = e.target.id;\n\n    if (clickedCards.includes(id)) {\n      setGameState(\"game over\");\n    } else {\n      setClickedCards((prevClickedCards) => [...prevClickedCards, id]);\n      setCurrentScore((prevCurrentScore) => prevCurrentScore + 1);\n    }\n  };\n\n  // Welcome Page\n  if (gameState === \"welcome\") {\n    return (\n      <div className=\"welcome-block\">\n        <InfoBlock\n          title=\"Breaking Bad memory Game\"\n          body=\"Get a point by clicking a card that has not yet been clicked. If you click the same card twice in a round, you lose! Once all cards in a round have been clicked, a new round starts with more cards.\n        \"\n        />\n        <button onClick={startNewGame}>New Game</button>\n      </div>\n    );\n  }\n\n  // Highest Score Possible Page\n  if (gameState === \"highest score\") {\n    return (\n      <div className=\"highest-score\">\n        <InfoBlock\n          title=\"You win!\"\n          body=\"You have achieved the highest possible score!\"\n        />\n        <button onClick={startNewGame}>New Game</button>\n      </div>\n    );\n  }\n\n  // Game Over Page\n  if (gameState === \"game over\") {\n    return (\n      <div className=\"game-over\">\n        <InfoBlock title=\"Game Over\" body={`Score: ${currentScore}`} />\n        <button onClick={startNewGame}>New Game</button>\n      </div>\n    );\n  }\n\n  // Game Page\n  if (gameState === \"game\") {\n    return (\n      <div className=\"game\">\n        <div className=\"score-board\">\n          <h1>Round {round}</h1>\n          <p>Current Score: {currentScore}</p>\n          <p>Best Score: {bestScore}</p>\n        </div>\n        <CharacterGrid\n          characters={allCharacters}\n          limit={round * cardsToShow}\n          clickCharacterCard={clickCharacterCard}\n          startNewRound={startNewRound}\n          clickedCards={clickedCards}\n          round={round}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}